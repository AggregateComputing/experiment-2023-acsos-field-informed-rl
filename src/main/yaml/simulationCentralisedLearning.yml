incarnation: scafi

variables:
  width: &width { formula: 1000.0, language: scala }
  spacing: &spacing { formula: 300.0, language: scala }
  randomness: &randomness { formula: 25.0, language: scala }

  random: &random
    min: 0
    max: 5
    step: 1
    default: 2

  range: &range
    formula: 400
    language: scala

  file: &file
    formula: >
      s"boids/condensed-${random.toString.toDouble.toInt}"
    language: scala

  environmentBox: &environmentBox
    formula: |
      import it.unibo.scripting._;
      it.unibo.learning.Box(width.as[Double], spacing.as[Double], randomness.as[Double])
    language: scala

  batchSize: &batchSize { formula: 64, language: scala }
  episodeLength: &episodeLength { formula: 20, language: scala }
  bufferSize: &bufferSize { formula: 100000, language: scala }
  windowSize: &windowSize { formula: 5, language: scala }
  actionSpaceEvaluated: &actionSpaceEvaluated
    #formula: "it.unibo.learning.abstractions.ActionSpace.create(5, List(0, 1, 1.5, 2.0, 2.5, 3.0))"
    formula: "it.unibo.learning.abstractions.ActionSpace.create(5, List(1))"
    language: scala

  neuralNet: &neuralNet
    formula: |
      import it.unibo.learning.network.torch.torch;
      torch.manual_seed(0)
      //torch.manual_seed(random.as[Double].toInt);
      import it.unibo.learning.network._;
      import it.unibo.scripting._;
      new MLPSpatial(
        hiddenSize = 128, 
        neigh = 5,
        actionSpace = actionSpaceEvaluated.as[List[Any]]
      )
    language: scala

  learner: &learner
    formula: |
      import it.unibo.learning.abstractions.DecayReference;
      import it.unibo.learning.agents.DeepQLearning;
      import it.unibo.learning.network.NeuralNetworkRL;
      import it.unibo.scripting._;
      new DeepQLearning(
        epsilon = DecayReference.exponentialDecay(0.9, 0.01).bounded(0.01),
        alpha = 0.0004,
        gamma = 0.99,
        copyEach = 10,
        referenceNet = neuralNet.as[NeuralNetworkRL]
      )
    language: scala
_constants:
  layerMolecule: &layerMolecule 'density'

seeds:
  scenario: *random
  simulation: *random

layers:
  - type: DensityMap
    parameters: [40]
    molecule: *layerMolecule

environment:
  type: Continuous2DEnvironment
  parameters: []
  global-programs:
    - time-distribution: 1
      type: DensityMapFromFiles
      parameters: [ "boids", "condensed", 100, *episodeLength, *layerMolecule ]
    - time-distribution: 1
      type: GlobalLearner
      parameters: [*layerMolecule, *learner, *bufferSize, *windowSize, *batchSize, *actionSpaceEvaluated, *episodeLength, *environmentBox]

network-model:
  type: ConnectWithinDistance #*connectionType
  parameters: [*range]

deployments:
  type: Grid
  parameters: [0, 0, *width, *width, *spacing, *spacing, *randomness, *randomness]

export:
  - type: CSVExporter
    parameters:
      exportPath: "export"
      fileNameRoot: "simulation"
      interval: 1.0
    data:
      - time
      - type: CoverageExtractor
      - type: DensityExtractor