incarnation: scafi

variables:
  width: &width { formula: 1000.0 }
  spacing: &spacing { formula: 200.0 }
  randomness: &randomness { formula: 25.0 }
  random: &random
    min: 0
    max: 0
    step: 1
    default: 0

  range: &range
    formula: 300

  view: &view
    formula: 75.0


  environmentBox: &environmentBox
    formula: |
      import it.unibo.scripting._;
      it.unibo.learning.Box(width.as[Double], spacing.as[Double], randomness.as[Double])
    language: application/x-scala

  batchSize: &batchSize { formula: 32, language: application/x-scala }
  episodeLength: &episodeLength { formula: 200, language: application/x-scala }
  bufferSize: &bufferSize { formula: 1000, language: application/x-scala }
  actionSpaceEvaluated: &actionSpaceEvaluated
    formula: "it.unibo.learning.abstractions.ActionSpace.create(20, List(0, 0.5, 1), false)"
    language: application/x-scala

  neuralNet: &neuralNet
    formula: |
      import it.unibo.learning.network.torch.torch;
      import me.shadaj.scalapy.py
      torch.manual_seed(0)
      py.module("numpy").random.seed(0)
      py.module("random").seed(0)
      torch.use_deterministic_algorithms(true)
      //torch.manual_seed(random.as[Double].toInt);
      import it.unibo.learning.network._;
      import it.unibo.scripting._;
      new GNNSpatial(
        hiddenSize = 256,
        actionSpace = actionSpaceEvaluated.as[List[Any]]
      )
    language: application/x-scala

  learner: &learner
    formula: |
      import it.unibo.learning.abstractions.DecayReference;
      import it.unibo.learning.agents.DeepGnnQLearning;
      import it.unibo.learning.network.GraphNeuralNetworkRL;
      import it.unibo.scripting._;
      new DeepGnnQLearning(
        epsilon = DecayReference.exponentialDecay(0.0, 0.1).bounded(0.00),
        alpha = 0.0001,
        gamma = 0.99,
        copyEach = 200,
        referenceNet = neuralNet.as[GraphNeuralNetworkRL]
      )
    language: application/x-scala
_constants:
  layerMolecule: &layerMolecule 'density'

seeds:
  scenario: *random
  simulation: *random

layers:
  - type: CircleLayer
    parameters: [ 200, 200, 200, 0 ]
    molecule: info_old
  - type: CircleLayer
    parameters: [ 700, 700, 200, 0 ]
    molecule: info_old2
  - type: BidimensionalGaussianLayer
    parameters: [700, 700, 1, 100]
    molecule: info1
  - type: BidimensionalGaussianLayer
    parameters: [200, 200, 1, 100 ]
    molecule: info2
  - type: CombineAllLayer
    parameters: [ ]
    molecule: info
environment:
  type: Continuous2DEnvironment
  parameters: []
  global-programs:
    - time-distribution:
        type: DiracComb
        parameters: [ 0.2, 1.0 ]
      type: GlobalLearnerDecentralisedAgentCollectiveGNN
      parameters: [*learner, *bufferSize, *batchSize, *actionSpaceEvaluated, *episodeLength, *environmentBox, false, "gnn-informed", *random]


network-model:
  type: ConnectWithinDistance
  parameters: [ 300 ]

_reactions:
  - program: &program
      - time-distribution:
          type: DiracComb
          parameters: [ 0.1, 1.0 ]
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.scafi.ExplorerCollectiveTwoLayer, 2 ]
      - program: send
deployments:
  type: Grid
  parameters: [0, 0, *width, *width, *spacing, *spacing, *randomness, *randomness]
  contents:
    molecule: view
    concentration: 100.0
  programs:
    - *program
export:
  - type: CSVExporter
    parameters:
      exportPath: "test"
      fileNameRoot: "two-informed"
      interval: 1.0
    data:
      - time
      - type: CoverageExtractor
        parameters: [ *view, 2 ]
      - type: StoreExtractor
      - molecule: inside
        aggregators: [ sum ]
        value-filter: onlyfinite
      - molecule: inside_1
        aggregators: [ sum ]
        value-filter: onlyfinite
      - molecule: inside_2
        aggregators: [ sum ]
        value-filter: onlyfinite

terminate:
  - type: AfterTime
    parameters: 200.0